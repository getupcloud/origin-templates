apiVersion: v1
kind: Template
labels:
  template: wordpress
metadata:
  annotations:
    description: 'An Wordpress application with a MySQL database'
    iconClass: icon-php
    tags: instant-app,php,wordpress,cms,mysql
  creationTimestamp: null
  name: wordpress
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes and load balances the application pods
    name: ${NAME}
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: ${NAME}
- apiVersion: v1
  kind: Route
  metadata:
    name: ${NAME}
  spec:
    host: ${APPLICATION_DOMAIN}
    to:
      kind: Service
      name: ${NAME}
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Allow
- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: ${NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      description: Defines how to build the application
    name: ${NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${NAME}:latest
    source:
      contextDir: ${CONTEXT_DIR}
      git:
        ref: ${SOURCE_REPOSITORY_REF}
        uri: ${SOURCE_REPOSITORY_URL}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: WITHVOLUME
          value: "yes"
        from:
          kind: ImageStreamTag
          name: php:5.6
          namespace: openshift
      type: Source
    triggers:
    - type: ImageChange
    - type: ConfigChange
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY_WEB}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the application server
      iconClass: icon-php
    name: ${NAME}
  spec:
    replicas: 1
    selector:
      name: ${NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${NAME}
        name: ${NAME}
      spec:
        containers:
        - env:
          - name: DATABASE_SERVICE_NAME
            value: ${DATABASE_SERVICE_NAME}
          - name: DATABASE_NAME
            value: ${DATABASE_NAME}
          - name: DATABASE_USER
            value: ${DATABASE_USER}
          - name: DATABASE_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: WORDPRESS_SECRET_TOKEN
            value: ${WORDPRESS_SECRET_TOKEN}
          - name: FS_METHOD
            value: direct
          - name: WITHVOLUME
            value: "yes"
          image: ${NAME}
          name: wordpress
          ports:
          - containerPort: 8080
          volumeMounts:
          - mountPath: /opt/app-root/src/data
            name: ${NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${NAME}-data
          persistentVolumeClaim:
            claimName: ${NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - wordpress
        from:
          kind: ImageStreamTag
          name: ${NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
      iconClass: icon-mysql-database
      tags: "database,mysql"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
        name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${DATABASE_USER}
          - name: MYSQL_PASSWORD
            value: ${DATABASE_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${DATABASE_NAME}
          image: mysql
          name: mysql
          ports:
          - containerPort: 3306
            protocol: TCP
          resources: {}
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:5.6
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
parameters:
- description: The exposed hostname that will route to the CakePHP service, if left blank a value will be defaulted.
  name: NAME
  value: wordpress
- description: The URL of the repository with your application source code
  name: SOURCE_REPOSITORY_URL
  value: https://github.com/getupcloud/wordpress-ex.git
- description: Set this to a branch name, tag or other ref of your repository if you
    are not using the default branch
  name: SOURCE_REPOSITORY_REF
- description: Set this to the relative path to your project if it is not in the root
    of your repository
  name: CONTEXT_DIR
- description: The exposed hostname that will route to the CakePHP service, if left
    blank a value will be defaulted.
  name: APPLICATION_DOMAIN
- description: A secret string used to configure the GitHub webhook
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
- description: A secret string used to configure the Generic webhook
  from: '[a-zA-Z0-9]{40}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
- description: Database service name
  name: DATABASE_SERVICE_NAME
  value: mysql
- description: 'Database engine: postgresql, mysql or sqlite (default)'
  name: DATABASE_ENGINE
  value: mysql
- description: Database name
  name: DATABASE_NAME
  value: wordpress
- description: Database user name
  name: DATABASE_USER
  value: wordpress
- description: Database user password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_PASSWORD
- description: Set this to a long random string
  from: '[\w]{50}'
  generate: expression
  name: WORDPRESS_SECRET_TOKEN
- description: Volume space available for Database data
  name: VOLUME_CAPACITY
  displayName: 'Tamanho do Volume de dados [select:5Gi=5GB:10Gi=10GB:20Gi=20GB]'
  required: true
  value: 1Gi
- description: Volume space available for WORDPRESS data
  name: VOLUME_CAPACITY_WEB
  displayName: 'Tamanho do Volume de dados para WEB [select:5Gi=5GB:10Gi=10GB:20Gi=20GB]'
  required: true
  value: 1Gi
